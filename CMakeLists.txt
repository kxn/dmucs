cmake_minimum_required(VERSION 3.0)
project(dmucs)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wno-pointer-sign -Wno-implicit-function-declaration")
add_subdirectory(COSMIC)
link_libraries(simpleskts)
include_directories(${CMAKE_BINARY_DIR})
add_executable(dmucs dmucs_resolve.cc dmucs_db.cc dmucs_host.cc dmucs_hosts_file.cc dmucs_msg.cc dmucs_host_state.cc main.cc)
add_executable(gethost dmucs_resolve.cc gethost.cc)
add_executable(loadavg loadavg.cc)
add_executable(monitor monitor.cc)
add_executable(remhost remhost.cc)

include(CheckIncludeFile)
include(CheckFunctionExists)
include(CheckLibraryExists)
check_include_file(arpa/inet.h HAVE_ARPA_INET_H)
check_include_file(dlfcn.h HAVE_DLFCN_H)
check_function_exists(fork HAVE_FORK)
check_function_exists(gethostbyaddr HAVE_GETHOSTBYADDR)
check_function_exists(gethostbyaddr_r HAVE_GETHOSTBYADDR_R)
set(HAVE_GETHOSTBYADDR_R_8_ARGS 1)
set(HAVE_GETHOSTBYADDR_R_5_ARGS 0)
set(HAVE_GETHOSTBYADDR_R_7_ARGS 0)
check_function_exists(gethostbyname HAVE_GETHOSTBYNAME)
check_function_exists(gethostname HAVE_GETHOSTNAME)
check_function_exists(inet_ntoa HAVE_INET_NTOA)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_library_exists(nsl gethostbyname "" HAVE_LIBNSL)
check_library_exists(pthread pthread_mutex_lock "" HAVE_LIBPTHREAD)
check_library_exists(socket socket "" HAVE_LIBSOCKET)
check_include_file(memory.h HAVE_MEMORY_H)
check_include_file(netdb.h HAVE_NETDB_H)
check_include_file(netinet/in.h HAVE_NETINET_IN_H)
check_function_exists(putenv HAVE_PUTENV)
check_include_file(stdbool.h HAVE_STDBOOL_H)
check_include_file(stdint.h HAVE_STDINT_H)
check_include_file(stdlib.h HAVE_STDLIB_H)
check_function_exists(strerror HAVE_STRERROR)
check_include_file(strings.h HAVE_STRINGS_H)
check_include_file(string.h HAVE_STRING_H)
check_include_file(sys/socket.h, HAVE_SYS_SOCKET_H)
check_include_file(sys/stat.h, HAVE_SYS_STAT_H)
check_include_file(sys/types.h, HAVE_SYS_TYPES_H)
check_include_file(unistd.h HAVE_UNISTD_H)
check_include_file(vfork.h HAVE_VFORK_H)
check_function_exists(vfork HAVE_VFORK)
set(HAVE_WORKING_FORK 1)
 
configure_file(config.h.cmake config.h)

